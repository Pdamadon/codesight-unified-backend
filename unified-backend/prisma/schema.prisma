generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UnifiedSession {
  id                   String               @id @default(uuid())
  type                 SessionType          @default(HUMAN)
  status               SessionStatus        @default(ACTIVE)
  startTime            DateTime             @default(now())
  endTime              DateTime?
  duration             Int?
  archiveUrl           String?
  trainingFileId       String?
  modelId              String?
  qualityScore         Float                @default(0)
  completeness         Float                @default(0)
  reliability          Float                @default(0)
  trainingValue        Float                @default(0)
  processingStatus     ProcessingStatus     @default(PENDING)
  processingSteps      Json                 @default("[]")
  processingErrors     Json                 @default("[]")
  config               Json                 @default("{}")
  workerId             String?
  userAgent            String?
  ipAddress            String?
  trainingMetrics      Json?
  modelPerformance     Json?
  dominantPersonality  PersonalityType?
  emotionalState       EmotionalState?
  decisionMakingStyle  DecisionMakingStyle?
  trustLevel           Float?
  urgencyLevel         Float?
  priceSensitivity     Float?
  socialInfluence      Float?
  psychologyConfidence Float?
  pageType             String?
  userIntent           String?
  shoppingStage        String?
  behaviorType         String?
  purchaseReadiness    Float?
  navigationEfficiency Float?
  contextualInsights   Json?
  
  // Enhanced interaction data storage (for 6-group enhanced data)
  enhancedInteractions Json     @default("[]")  // Array of enhanced interaction objects
  lastInteractionTime  DateTime?               // Track latest interaction timestamp
  interactionCount     Int      @default(0)    // Quick count without parsing JSON
  version              Int      @default(1)    // For optimistic locking on concurrent updates
  
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  interactions         Interaction[]
  screenshots          Screenshot[]
  archives             SessionArchive[]

  @@index([type, status])
  @@index([createdAt])
  @@index([qualityScore])
  @@index([workerId])
  @@index([version])
  @@index([lastInteractionTime])
  @@index([interactionCount])
  @@map("unified_sessions")
}

model Interaction {
  id                 String          @id @default(uuid())
  sessionId          String
  type               InteractionType
  timestamp          BigInt
  sessionTime        Int
  confidence         Float           @default(0)
  sequence           Int?
  context            Json
  element            Json
  interaction        Json
  legacyData         Json?
  qualityScore       Float           @default(0)
  selectors          Json
  state              Json
  visual             Json
  session            UnifiedSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  relatedScreenshots Screenshot[]

  @@index([sessionId, timestamp])
  @@index([type])
  @@index([qualityScore])
  @@map("interactions")
}

model Screenshot {
  id               String         @id @default(uuid())
  sessionId        String
  interactionId    String?
  timestamp        BigInt
  eventType        String
  s3Key            String?
  dataUrl          String?
  compressed       Boolean        @default(false)
  format           String         @default("png")
  fileSize         Int?
  viewport         Json
  quality          Float          @default(0)
  visionAnalysis   Json?
  userPsychology   Json?
  burstId          String?
  burstIndex       Int?
  burstTotal       Int?
  trigger          String?
  compressionRatio Float?
  interaction      Interaction?   @relation(fields: [interactionId], references: [id])
  session          UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, timestamp])
  @@index([eventType])
  @@map("screenshots")
}

model SessionArchive {
  id               String         @id @default(uuid())
  sessionId        String
  version          String         @default("1.0")
  format           String         @default("zip")
  s3Bucket         String
  s3Key            String
  fileSize         BigInt
  checksum         String
  manifest         Json
  compressionRatio Float?
  status           ArchiveStatus  @default(CREATING)
  createdAt        DateTime       @default(now())
  session          UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([status])
  @@map("session_archives")
}

model TrainingData {
  id                  String         @id @default(uuid())
  sessionId           String
  openaiFileId        String?
  jsonlData           String?
  fileSize            Int?
  trainingJobId       String?
  modelId             String?
  hyperparameters     Json           @default("{}")
  trainingConfig      Json           @default("{}")
  trainingMetrics     Json?
  validationResults   Json?
  trainingQuality     Float          @default(0)
  expectedPerformance Float          @default(0)
  status              TrainingStatus @default(PENDING)
  createdAt           DateTime       @default(now())
  completedAt         DateTime?

  @@index([sessionId])
  @@index([status])
  @@index([modelId])
  @@map("training_data")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  category    String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}

model QualityReport {
  id                String   @id @default(uuid())
  sessionId         String
  overallScore      Float
  completenessScore Float
  reliabilityScore  Float
  accuracyScore     Float
  validationResults Json     @default("{}")
  issues            Json     @default("[]")
  recommendations   Json     @default("[]")
  generatedAt       DateTime @default(now())
  version           String   @default("1.0")

  @@index([sessionId])
  @@index([overallScore])
  @@map("quality_reports")
}

model PsychologyProfile {
  id                  String              @id @default(uuid())
  sessionId           String              @unique
  dominantPersonality PersonalityType
  emotionalState      EmotionalState
  decisionMakingStyle DecisionMakingStyle
  trustLevel          Float               @default(50)
  urgencyLevel        Float               @default(30)
  priceSensitivity    Float               @default(40)
  socialInfluence     Float               @default(35)
  insights            Json                @default("[]")
  behaviorPredictions Json                @default("[]")
  recommendations     Json                @default("[]")
  confidence          Float               @default(0)
  processingTimestamp DateTime            @default(now())

  @@index([sessionId])
  @@index([dominantPersonality])
  @@index([emotionalState])
  @@index([confidence])
  @@map("psychology_profiles")
}

model ContextEnhancement {
  id                  String   @id @default(uuid())
  sessionId           String   @unique
  pageStructure       Json     @default("{}")
  userIntent          Json     @default("{}")
  navigationPattern   Json     @default("{}")
  shoppingBehavior    Json     @default("{}")
  contextualInsights  Json     @default("[]")
  trainingValue       Float    @default(0)
  processingTimestamp DateTime @default(now())

  @@index([sessionId])
  @@index([trainingValue])
  @@map("context_enhancements")
}

model VisionAnalysisCache {
  id             String   @id @default(uuid())
  screenshotId   String
  analysisType   String
  analysisResult Json
  qualityScore   Float    @default(0)
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  hitCount       Int      @default(0)

  @@unique([screenshotId, analysisType])
  @@index([expiresAt])
  @@map("vision_analysis_cache")
}

enum SessionType {
  HUMAN
  AUTOMATED
  HYBRID
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  PROCESSING
  ARCHIVED
  FAILED
}

enum ProcessingStatus {
  PENDING
  VALIDATING
  ENHANCING
  PSYCHOLOGY_ANALYSIS
  TRAINING
  ARCHIVING
  COMPLETED
  FAILED
}

enum InteractionType {
  CLICK
  INPUT
  SCROLL
  NAVIGATION
  HOVER
  FOCUS
  BLUR
  FORM_SUBMIT
  KEY_PRESS
  DRAG
  DROP
  TOUCH
}

enum ArchiveStatus {
  CREATING
  UPLOADING
  COMPLETED
  FAILED
}

enum TrainingStatus {
  PENDING
  GENERATING
  UPLOADING
  TRAINING
  COMPLETED
  FAILED
}

enum PersonalityType {
  ANALYTICAL
  IMPULSIVE
  CAUTIOUS
  SOCIAL
  PRACTICAL
}

enum EmotionalState {
  EXCITED
  FRUSTRATED
  CONFIDENT
  UNCERTAIN
  NEUTRAL
}

enum DecisionMakingStyle {
  QUICK
  DELIBERATE
  COMPARISON_HEAVY
  RESEARCH_DRIVEN
}
