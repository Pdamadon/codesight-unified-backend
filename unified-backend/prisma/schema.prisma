generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UnifiedSession {
  id                   String               @id @default(uuid())
  type                 SessionType          @default(HUMAN)
  status               SessionStatus        @default(ACTIVE)
  startTime            DateTime             @default(now())
  endTime              DateTime?
  duration             Int?
  archiveUrl           String?
  trainingFileId       String?
  modelId              String?
  qualityScore         Float                @default(0)
  completeness         Float                @default(0)
  reliability          Float                @default(0)
  trainingValue        Float                @default(0)
  processingStatus     ProcessingStatus     @default(PENDING)
  processingSteps      Json                 @default("[]")
  processingErrors     Json                 @default("[]")
  config               Json                 @default("{}")
  workerId             String?
  userAgent            String?
  ipAddress            String?
  trainingMetrics      Json?
  modelPerformance     Json?
  dominantPersonality  PersonalityType?
  emotionalState       EmotionalState?
  decisionMakingStyle  DecisionMakingStyle?
  trustLevel           Float?
  urgencyLevel         Float?
  priceSensitivity     Float?
  socialInfluence      Float?
  psychologyConfidence Float?
  pageType             String?
  userIntent           String?
  shoppingStage        String?
  behaviorType         String?
  purchaseReadiness    Float?
  navigationEfficiency Float?
  contextualInsights   Json?
  
  // Enhanced interaction data storage (for 6-group enhanced data)
  enhancedInteractions Json     @default("[]")  // Array of enhanced interaction objects
  lastInteractionTime  DateTime?               // Track latest interaction timestamp
  interactionCount     Int      @default(0)    // Quick count without parsing JSON
  version              Int      @default(1)    // For optimistic locking on concurrent updates
  
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  interactions         Interaction[]
  screenshots          Screenshot[]
  archives             SessionArchive[]

  @@index([type, status])
  @@index([createdAt])
  @@index([qualityScore])
  @@index([workerId])
  @@index([version])
  @@index([lastInteractionTime])
  @@index([interactionCount])
  @@map("unified_sessions")
}

model Interaction {
  id                 String          @id @default(uuid())
  sessionId          String
  type               InteractionType
  timestamp          BigInt
  sessionTime        Int
  confidence         Float           @default(0)
  sequence           Int?
  context            Json
  element            Json
  interaction        Json
  legacyData         Json?
  qualityScore       Float           @default(0)
  selectors          Json
  state              Json
  visual             Json
  session            UnifiedSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  relatedScreenshots Screenshot[]

  @@index([sessionId, timestamp])
  @@index([type])
  @@index([qualityScore])
  @@map("interactions")
}

model Screenshot {
  id               String         @id @default(uuid())
  sessionId        String
  interactionId    String?
  timestamp        BigInt
  eventType        String
  s3Key            String?
  dataUrl          String?
  compressed       Boolean        @default(false)
  format           String         @default("png")
  fileSize         Int?
  viewport         Json
  quality          Float          @default(0)
  visionAnalysis   Json?
  userPsychology   Json?
  burstId          String?
  burstIndex       Int?
  burstTotal       Int?
  trigger          String?
  compressionRatio Float?
  interaction      Interaction?   @relation(fields: [interactionId], references: [id])
  session          UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, timestamp])
  @@index([eventType])
  @@map("screenshots")
}

model SessionArchive {
  id               String         @id @default(uuid())
  sessionId        String
  version          String         @default("1.0")
  format           String         @default("zip")
  s3Bucket         String
  s3Key            String
  fileSize         BigInt
  checksum         String
  manifest         Json
  compressionRatio Float?
  status           ArchiveStatus  @default(CREATING)
  createdAt        DateTime       @default(now())
  session          UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([status])
  @@map("session_archives")
}

model TrainingData {
  id                  String         @id @default(uuid())
  sessionId           String
  openaiFileId        String?
  jsonlData           String?
  fileSize            Int?
  trainingJobId       String?
  modelId             String?
  hyperparameters     Json           @default("{}")
  trainingConfig      Json           @default("{}")
  trainingMetrics     Json?
  validationResults   Json?
  trainingQuality     Float          @default(0)
  expectedPerformance Float          @default(0)
  status              TrainingStatus @default(PENDING)
  createdAt           DateTime       @default(now())
  completedAt         DateTime?

  @@index([sessionId])
  @@index([status])
  @@index([modelId])
  @@map("training_data")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  category    String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}

model QualityReport {
  id                String   @id @default(uuid())
  sessionId         String
  overallScore      Float
  completenessScore Float
  reliabilityScore  Float
  accuracyScore     Float
  validationResults Json     @default("{}")
  issues            Json     @default("[]")
  recommendations   Json     @default("[]")
  generatedAt       DateTime @default(now())
  version           String   @default("1.0")

  @@index([sessionId])
  @@index([overallScore])
  @@map("quality_reports")
}

model PsychologyProfile {
  id                  String              @id @default(uuid())
  sessionId           String              @unique
  dominantPersonality PersonalityType
  emotionalState      EmotionalState
  decisionMakingStyle DecisionMakingStyle
  trustLevel          Float               @default(50)
  urgencyLevel        Float               @default(30)
  priceSensitivity    Float               @default(40)
  socialInfluence     Float               @default(35)
  insights            Json                @default("[]")
  behaviorPredictions Json                @default("[]")
  recommendations     Json                @default("[]")
  confidence          Float               @default(0)
  processingTimestamp DateTime            @default(now())

  @@index([sessionId])
  @@index([dominantPersonality])
  @@index([emotionalState])
  @@index([confidence])
  @@map("psychology_profiles")
}

model ContextEnhancement {
  id                  String   @id @default(uuid())
  sessionId           String   @unique
  pageStructure       Json     @default("{}")
  userIntent          Json     @default("{}")
  navigationPattern   Json     @default("{}")
  shoppingBehavior    Json     @default("{}")
  contextualInsights  Json     @default("[]")
  trainingValue       Float    @default(0)
  processingTimestamp DateTime @default(now())

  @@index([sessionId])
  @@index([trainingValue])
  @@map("context_enhancements")
}

model VisionAnalysisCache {
  id             String   @id @default(uuid())
  screenshotId   String
  analysisType   String
  analysisResult Json
  qualityScore   Float    @default(0)
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  hitCount       Int      @default(0)

  @@unique([screenshotId, analysisType])
  @@index([expiresAt])
  @@map("vision_analysis_cache")
}

enum SessionType {
  HUMAN
  AUTOMATED
  HYBRID
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  PROCESSING
  ARCHIVED
  FAILED
}

enum ProcessingStatus {
  PENDING
  VALIDATING
  ENHANCING
  PSYCHOLOGY_ANALYSIS
  TRAINING
  ARCHIVING
  COMPLETED
  FAILED
}

enum InteractionType {
  CLICK
  INPUT
  SCROLL
  NAVIGATION
  HOVER
  FOCUS
  BLUR
  FORM_SUBMIT
  KEY_PRESS
  DRAG
  DROP
  TOUCH
}

enum ArchiveStatus {
  CREATING
  UPLOADING
  COMPLETED
  FAILED
}

enum TrainingStatus {
  PENDING
  GENERATING
  UPLOADING
  TRAINING
  COMPLETED
  FAILED
}

enum PersonalityType {
  ANALYTICAL
  IMPULSIVE
  CAUTIOUS
  SOCIAL
  PRACTICAL
}

enum EmotionalState {
  EXCITED
  FRUSTRATED
  CONFIDENT
  UNCERTAIN
  NEUTRAL
}

enum DecisionMakingStyle {
  QUICK
  DELIBERATE
  COMPARISON_HEAVY
  RESEARCH_DRIVEN
}

model GeneratedTask {
  id               String              @id @default(uuid())
  type             TaskType
  difficulty       TaskDifficulty
  title            String
  description      String
  steps            String              // JSON string of steps array
  website          String
  category         String
  estimatedTime    Int                 // in minutes
  successCriteria  String              // JSON string of success criteria array
  tags             String              // JSON string of tags array
  context          String              // JSON string of task context
  status           TaskAvailability    @default(AVAILABLE)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  assignments      TaskAssignment[]

  @@index([type])
  @@index([difficulty])
  @@index([category])
  @@index([status])
  @@index([createdAt])
  @@map("generated_tasks")
}

model TaskAssignment {
  id                  String               @id @default(uuid())
  taskId              String
  sessionId           String
  userId              String               @default("anonymous")
  assignedAt          DateTime             @default(now())
  status              TaskAssignmentStatus @default(ASSIGNED)
  completionTime      Int?                 // in seconds
  automationSequence String?              // JSON string of automation steps
  outcomeAnalysis     String?              // JSON string of analysis
  task                GeneratedTask        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([sessionId])
  @@index([userId])
  @@index([status])
  @@index([assignedAt])
  @@map("task_assignments")
}

enum TaskType {
  SIMPLE
  COMPARISON
  COMPLEX
  WORKFLOW
}

enum TaskDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TaskAvailability {
  AVAILABLE
  ASSIGNED
  COMPLETED
  ARCHIVED
}

enum TaskAssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  ABANDONED
}

// =============================================
// AGENT 1: SITE COMPREHENSION DATA
// =============================================

model Agent1SiteModel {
  id              String   @id @default(uuid())
  
  // Site identification
  domain          String   
  subdomain       String?
  siteType        SiteType @default(UNKNOWN)
  
  // Site architecture analysis
  urlPatterns     Json     @default("[]")     // Common URL structures
  pageTypes       Json     @default("[]")     // Available page types
  navigationFlows Json     @default("[]")     // Common user flows
  
  // Page classification patterns  
  pageTypeRules   Json     @default("{}")     // Rules for classifying pages
  layoutPatterns  Json     @default("{}")     // Common layout structures
  semanticZones   Json     @default("{}")     // Identified semantic areas
  
  // Business understanding
  conversionFlows Json     @default("[]")     // Purchase/signup flows
  businessGoals   Json     @default("[]")     // Site objectives
  userIntentTypes Json     @default("[]")     // Common user goals
  
  // Performance metrics
  analysisCount   Int      @default(0)       // How many times analyzed
  successRate     Float    @default(0)       // Navigation success rate
  lastAnalyzed    DateTime @default(now())
  confidence      Float    @default(0)       // Overall model confidence
  
  // Relationships
  pageAnalyses    Agent1PageAnalysis[]
  journeyPlans    Agent1JourneyPlan[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([domain, subdomain])
  @@index([siteType])
  @@index([confidence])
  @@map("agent1_site_models")
}

model Agent1PageAnalysis {
  id              String   @id @default(uuid())
  siteModelId     String
  
  // Page identification
  url             String
  pageType        String   // homepage, category, product, checkout, etc.
  pageTitle       String?
  
  // Page analysis results
  semanticZones   Json     @default("[]")     // Navigation, content, sidebar zones
  keyElements     Json     @default("[]")     // Important interactive elements
  contentStructure Json   @default("{}")     // How content is organized
  
  // Navigation context
  entryPoints     Json     @default("[]")     // How users typically arrive
  exitPoints      Json     @default("[]")     // Where users typically go next
  conversionOps   Json     @default("[]")     // Available conversion actions
  
  // Quality metrics
  analysisScore   Float    @default(0)
  completeness    Float    @default(0)
  reliability     Float    @default(0)
  
  analyzedAt      DateTime @default(now())
  siteModel       Agent1SiteModel @relation(fields: [siteModelId], references: [id], onDelete: Cascade)
  
  @@index([siteModelId, pageType])
  @@index([url])
  @@map("agent1_page_analyses")
}

model Agent1JourneyPlan {
  id              String   @id @default(uuid())
  siteModelId     String
  
  // Journey definition
  userIntent      String   // What user wants to accomplish
  goalType        GoalType // purchase, research, browse, account
  startingPage    String?  // Where journey typically begins
  
  // Navigation plan
  plannedSteps    Json     @default("[]")     // Step-by-step navigation plan
  alternativePaths Json    @default("[]")     // Backup routes
  successCriteria Json     @default("[]")     // How to know if successful
  
  // Performance tracking
  planUsedCount   Int      @default(0)
  successCount    Int      @default(0)
  failureCount    Int      @default(0)
  avgDuration     Float?   // Average completion time
  
  // Quality metrics
  planConfidence  Float    @default(0)
  lastUsed        DateTime?
  
  createdAt       DateTime @default(now())
  siteModel       Agent1SiteModel @relation(fields: [siteModelId], references: [id], onDelete: Cascade)
  
  @@index([siteModelId, goalType])
  @@index([userIntent])
  @@map("agent1_journey_plans")
}

// =============================================
// AGENT 2: CLICK EXECUTION DATA  
// =============================================

model Agent2ElementMap {
  id              String   @id @default(uuid())
  
  // Element identification
  domain          String
  pageType        String   // product, category, checkout, etc.
  elementPurpose  String   // add-to-cart, navigation, filter, etc.
  
  // Selector strategies
  primarySelector String   // Most reliable selector
  backupSelectors Json     @default("[]")     // Fallback options
  selectorType    SelectorType @default(XPATH) // xpath, css, text, etc.
  
  // Reliability tracking
  reliability     Float    @default(0)        // Success rate (0-1)
  usageCount      Int      @default(0)        // How many times tried
  successCount    Int      @default(0)        // How many times worked
  failureCount    Int      @default(0)        // How many times failed
  
  // Context requirements
  spatialContext  Json     @default("{}")     // Required nearby elements
  stateContext    Json     @default("{}")     // Required page state
  timingContext   Json     @default("{}")     // Timing requirements
  
  // Element details
  elementType     String   // button, input, link, etc.
  expectedText    String?  // Expected element text
  visualProps     Json     @default("{}")     // Size, position patterns
  
  // Performance metrics
  avgResponseTime Float?   // Average click response time
  lastUsed        DateTime?
  lastUpdated     DateTime @default(now())
  
  // Relationships
  interactions    Agent2Interaction[]
  
  @@index([domain, pageType, elementPurpose])
  @@index([reliability])
  @@index([usageCount])
  @@map("agent2_element_maps")
}

model Agent2Interaction {
  id                String   @id @default(uuid())
  elementMapId      String
  sessionId         String?  // Link to original session if available
  
  // Interaction details
  actionType        ActionType @default(CLICK) // click, input, scroll, etc.
  selectorUsed      String   // Which selector was actually used
  coordinatesUsed   Json?    // x,y if coordinates were used
  
  // Context at time of interaction
  pageUrl           String
  pageState         Json     @default("{}")     // Page state when clicked
  nearbyElements    Json     @default("[]")     // What was around element
  
  // Result tracking
  success           Boolean  @default(false)
  errorMessage      String?  // If failed, what went wrong
  responseTime      Float?   // How long click took
  stateChangeResult Json?    // What changed after click
  
  // Quality metrics
  confidence        Float    @default(0)
  
  executedAt        DateTime @default(now())
  elementMap        Agent2ElementMap @relation(fields: [elementMapId], references: [id], onDelete: Cascade)
  
  @@index([elementMapId, success])
  @@index([sessionId])
  @@index([executedAt])
  @@map("agent2_interactions")
}

model Agent2Strategy {
  id              String   @id @default(uuid())
  
  // Strategy identification
  domain          String
  strategyType    StrategyType @default(STANDARD) // standard, fallback, recovery
  contextType     String   // page-load, after-scroll, modal-present, etc.
  
  // Strategy definition
  name            String   // Human readable name
  description     String?  // What this strategy does
  conditions      Json     @default("[]")     // When to use this strategy
  actions         Json     @default("[]")     // Step-by-step actions
  
  // Success metrics
  usageCount      Int      @default(0)
  successRate     Float    @default(0)
  avgDuration     Float?   // Average execution time
  
  // Quality tracking
  confidence      Float    @default(0)
  lastUsed        DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([domain, strategyType])
  @@index([successRate])
  @@map("agent2_strategies")
}

// =============================================
// SHARED AGENT DATA
// =============================================

model AgentPerformanceLog {
  id              String   @id @default(uuid())
  
  // Agent identification
  agentType       AgentType // SITE_COMPREHENSION or CLICK_EXECUTION
  agentVersion    String    @default("1.0")
  
  // Task context
  taskId          String?   // If part of a larger task
  sessionId       String?   // Related session
  domain          String    // What site was this on
  
  // Performance data
  taskType        String    // navigation-planning, element-click, etc.
  success         Boolean   @default(false)
  duration        Float?    // How long it took
  confidence      Float?    // Agent's confidence in result
  
  // Results
  inputData       Json      @default("{}")     // What agent received
  outputData      Json      @default("{}")     // What agent produced
  errorData       Json?     // If failed, error details
  
  // Quality metrics
  accuracyScore   Float?    // If verifiable, how accurate
  userSatisfied   Boolean?  // User feedback if available
  
  executedAt      DateTime  @default(now())
  
  @@index([agentType, domain])
  @@index([success, executedAt])
  @@index([taskType])
  @@map("agent_performance_logs")
}

// =============================================
// ENUMS FOR AGENT SYSTEM
// =============================================

enum SiteType {
  ECOMMERCE
  SAAS  
  CONTENT
  CORPORATE
  MARKETPLACE
  SOCIAL
  UNKNOWN
}

enum GoalType {
  PURCHASE
  RESEARCH  
  BROWSE
  ACCOUNT
  SUPPORT
  ONBOARDING
  COMPARISON
  UNKNOWN
}

enum SelectorType {
  XPATH
  CSS
  TEXT
  ARIA_LABEL
  DATA_TESTID
  ID
  CLASS
  COORDINATES
}

enum ActionType {
  CLICK
  INPUT
  SCROLL
  HOVER
  DRAG
  DROP
  KEY_PRESS
  FORM_SUBMIT
  WAIT
}

enum StrategyType {
  STANDARD
  FALLBACK
  RECOVERY
  EXPERIMENTAL
}

enum AgentType {
  SITE_COMPREHENSION
  CLICK_EXECUTION
}
