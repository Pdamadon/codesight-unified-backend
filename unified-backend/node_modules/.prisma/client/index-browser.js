
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UnifiedSessionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  archiveUrl: 'archiveUrl',
  trainingFileId: 'trainingFileId',
  modelId: 'modelId',
  qualityScore: 'qualityScore',
  completeness: 'completeness',
  reliability: 'reliability',
  trainingValue: 'trainingValue',
  processingStatus: 'processingStatus',
  processingSteps: 'processingSteps',
  processingErrors: 'processingErrors',
  config: 'config',
  workerId: 'workerId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  trainingMetrics: 'trainingMetrics',
  modelPerformance: 'modelPerformance',
  dominantPersonality: 'dominantPersonality',
  emotionalState: 'emotionalState',
  decisionMakingStyle: 'decisionMakingStyle',
  trustLevel: 'trustLevel',
  urgencyLevel: 'urgencyLevel',
  priceSensitivity: 'priceSensitivity',
  socialInfluence: 'socialInfluence',
  psychologyConfidence: 'psychologyConfidence',
  pageType: 'pageType',
  userIntent: 'userIntent',
  shoppingStage: 'shoppingStage',
  behaviorType: 'behaviorType',
  purchaseReadiness: 'purchaseReadiness',
  navigationEfficiency: 'navigationEfficiency',
  contextualInsights: 'contextualInsights',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InteractionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  type: 'type',
  timestamp: 'timestamp',
  sessionTime: 'sessionTime',
  primarySelector: 'primarySelector',
  selectorAlternatives: 'selectorAlternatives',
  xpath: 'xpath',
  cssPath: 'cssPath',
  elementTag: 'elementTag',
  elementText: 'elementText',
  elementValue: 'elementValue',
  elementAttributes: 'elementAttributes',
  clientX: 'clientX',
  clientY: 'clientY',
  pageX: 'pageX',
  pageY: 'pageY',
  boundingBox: 'boundingBox',
  viewport: 'viewport',
  isInViewport: 'isInViewport',
  percentVisible: 'percentVisible',
  url: 'url',
  pageTitle: 'pageTitle',
  pageStructure: 'pageStructure',
  parentElements: 'parentElements',
  siblingElements: 'siblingElements',
  nearbyElements: 'nearbyElements',
  stateBefore: 'stateBefore',
  stateAfter: 'stateAfter',
  stateChanges: 'stateChanges',
  confidence: 'confidence',
  selectorReliability: 'selectorReliability',
  userIntent: 'userIntent',
  userReasoning: 'userReasoning',
  visualCues: 'visualCues'
};

exports.Prisma.ScreenshotScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  interactionId: 'interactionId',
  timestamp: 'timestamp',
  eventType: 'eventType',
  s3Key: 's3Key',
  dataUrl: 'dataUrl',
  compressed: 'compressed',
  format: 'format',
  fileSize: 'fileSize',
  viewport: 'viewport',
  quality: 'quality',
  visionAnalysis: 'visionAnalysis',
  userPsychology: 'userPsychology'
};

exports.Prisma.SessionArchiveScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  version: 'version',
  format: 'format',
  s3Bucket: 's3Bucket',
  s3Key: 's3Key',
  fileSize: 'fileSize',
  checksum: 'checksum',
  manifest: 'manifest',
  compressionRatio: 'compressionRatio',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.TrainingDataScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  openaiFileId: 'openaiFileId',
  jsonlData: 'jsonlData',
  fileSize: 'fileSize',
  trainingJobId: 'trainingJobId',
  modelId: 'modelId',
  hyperparameters: 'hyperparameters',
  trainingConfig: 'trainingConfig',
  trainingMetrics: 'trainingMetrics',
  validationResults: 'validationResults',
  trainingQuality: 'trainingQuality',
  expectedPerformance: 'expectedPerformance',
  status: 'status',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QualityReportScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  overallScore: 'overallScore',
  completenessScore: 'completenessScore',
  reliabilityScore: 'reliabilityScore',
  accuracyScore: 'accuracyScore',
  validationResults: 'validationResults',
  issues: 'issues',
  recommendations: 'recommendations',
  generatedAt: 'generatedAt',
  version: 'version'
};

exports.Prisma.PsychologyProfileScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  dominantPersonality: 'dominantPersonality',
  emotionalState: 'emotionalState',
  decisionMakingStyle: 'decisionMakingStyle',
  trustLevel: 'trustLevel',
  urgencyLevel: 'urgencyLevel',
  priceSensitivity: 'priceSensitivity',
  socialInfluence: 'socialInfluence',
  insights: 'insights',
  behaviorPredictions: 'behaviorPredictions',
  recommendations: 'recommendations',
  confidence: 'confidence',
  processingTimestamp: 'processingTimestamp'
};

exports.Prisma.ContextEnhancementScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  pageStructure: 'pageStructure',
  userIntent: 'userIntent',
  navigationPattern: 'navigationPattern',
  shoppingBehavior: 'shoppingBehavior',
  contextualInsights: 'contextualInsights',
  trainingValue: 'trainingValue',
  processingTimestamp: 'processingTimestamp'
};

exports.Prisma.VisionAnalysisCacheScalarFieldEnum = {
  id: 'id',
  screenshotId: 'screenshotId',
  analysisType: 'analysisType',
  analysisResult: 'analysisResult',
  qualityScore: 'qualityScore',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  hitCount: 'hitCount'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SessionType = exports.$Enums.SessionType = {
  HUMAN: 'HUMAN',
  AUTOMATED: 'AUTOMATED',
  HYBRID: 'HYBRID'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  PROCESSING: 'PROCESSING',
  ARCHIVED: 'ARCHIVED',
  FAILED: 'FAILED'
};

exports.ProcessingStatus = exports.$Enums.ProcessingStatus = {
  PENDING: 'PENDING',
  VALIDATING: 'VALIDATING',
  ENHANCING: 'ENHANCING',
  PSYCHOLOGY_ANALYSIS: 'PSYCHOLOGY_ANALYSIS',
  TRAINING: 'TRAINING',
  ARCHIVING: 'ARCHIVING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.PersonalityType = exports.$Enums.PersonalityType = {
  ANALYTICAL: 'ANALYTICAL',
  IMPULSIVE: 'IMPULSIVE',
  CAUTIOUS: 'CAUTIOUS',
  SOCIAL: 'SOCIAL',
  PRACTICAL: 'PRACTICAL'
};

exports.EmotionalState = exports.$Enums.EmotionalState = {
  EXCITED: 'EXCITED',
  FRUSTRATED: 'FRUSTRATED',
  CONFIDENT: 'CONFIDENT',
  UNCERTAIN: 'UNCERTAIN',
  NEUTRAL: 'NEUTRAL'
};

exports.DecisionMakingStyle = exports.$Enums.DecisionMakingStyle = {
  QUICK: 'QUICK',
  DELIBERATE: 'DELIBERATE',
  COMPARISON_HEAVY: 'COMPARISON_HEAVY',
  RESEARCH_DRIVEN: 'RESEARCH_DRIVEN'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  CLICK: 'CLICK',
  INPUT: 'INPUT',
  SCROLL: 'SCROLL',
  NAVIGATION: 'NAVIGATION',
  HOVER: 'HOVER',
  FOCUS: 'FOCUS',
  BLUR: 'BLUR',
  FORM_SUBMIT: 'FORM_SUBMIT',
  KEY_PRESS: 'KEY_PRESS',
  DRAG: 'DRAG',
  DROP: 'DROP',
  TOUCH: 'TOUCH'
};

exports.ArchiveStatus = exports.$Enums.ArchiveStatus = {
  CREATING: 'CREATING',
  UPLOADING: 'UPLOADING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.TrainingStatus = exports.$Enums.TrainingStatus = {
  PENDING: 'PENDING',
  GENERATING: 'GENERATING',
  UPLOADING: 'UPLOADING',
  TRAINING: 'TRAINING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  UnifiedSession: 'UnifiedSession',
  Interaction: 'Interaction',
  Screenshot: 'Screenshot',
  SessionArchive: 'SessionArchive',
  TrainingData: 'TrainingData',
  SystemConfig: 'SystemConfig',
  QualityReport: 'QualityReport',
  PsychologyProfile: 'PsychologyProfile',
  ContextEnhancement: 'ContextEnhancement',
  VisionAnalysisCache: 'VisionAnalysisCache'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
