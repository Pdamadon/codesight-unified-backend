// Unified CodeSight Database Schema
// Supports both human crowdsource and automated training data collection

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Unified session model supporting all collection types
model UnifiedSession {
  id String @id @default(uuid())

  // Session type and metadata
  type   SessionType   @default(HUMAN)
  status SessionStatus @default(ACTIVE)

  // Timing information
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int? // seconds

  // Data references
  archiveUrl     String? // S3 URL to compressed session archive
  trainingFileId String? // OpenAI training file ID
  modelId        String? // Trained model ID

  // Quality metrics (0-100 scale)
  qualityScore  Float @default(0)
  completeness  Float @default(0)
  reliability   Float @default(0)
  trainingValue Float @default(0)

  // Processing status
  processingStatus ProcessingStatus @default(PENDING)
  processingSteps  Json             @default("[]")
  processingErrors Json             @default("[]")

  // Session configuration
  config Json @default("{}")

  // User/Worker information (for human sessions)
  workerId  String?
  userAgent String?
  ipAddress String?

  // Training results
  trainingMetrics  Json?
  modelPerformance Json?

  // Psychology insights (denormalized for quick access)
  dominantPersonality  PersonalityType?
  emotionalState       EmotionalState?
  decisionMakingStyle  DecisionMakingStyle?
  trustLevel           Float?
  urgencyLevel         Float?
  priceSensitivity     Float?
  socialInfluence      Float?
  psychologyConfidence Float?

  // Context enhancement (denormalized for quick access)
  pageType             String?
  userIntent           String?
  shoppingStage        String?
  behaviorType         String?
  purchaseReadiness    Float?
  navigationEfficiency Float?
  contextualInsights   Json?

  // Relationships
  interactions Interaction[]
  screenshots  Screenshot[]
  archives     SessionArchive[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, status])
  @@index([createdAt])
  @@index([qualityScore])
  @@index([workerId])
  @@map("unified_sessions")
}

// Rich interaction data with multiple selector alternatives
model Interaction {
  id        String @id @default(uuid())
  sessionId String

  // Core interaction data
  type        InteractionType
  timestamp   BigInt // Unix timestamp in milliseconds
  sessionTime Int // Time since session start (ms)

  // Element identification with multiple selectors
  primarySelector      String
  selectorAlternatives Json    @default("[]") // Array of alternative selectors
  xpath                String?
  cssPath              String?

  // Element details
  elementTag        String
  elementText       String?
  elementValue      String?
  elementAttributes Json    @default("{}")

  // Interaction coordinates
  clientX Int?
  clientY Int?
  pageX   Int?
  pageY   Int?

  // Visual context
  boundingBox    Json // Element bounding box
  viewport       Json // Viewport dimensions and scroll
  isInViewport   Boolean @default(false)
  percentVisible Float   @default(0)

  // Page context
  url           String
  pageTitle     String
  pageStructure Json   @default("{}")

  // DOM context
  parentElements  Json @default("[]")
  siblingElements Json @default("[]")
  nearbyElements  Json @default("[]")

  // State changes
  stateBefore  Json  @default("{}")
  stateAfter   Json?
  stateChanges Json  @default("{}")

  // Quality and reliability
  confidence          Float @default(0)
  selectorReliability Json  @default("{}")

  // User intent and psychology (from vision analysis)
  userIntent    String?
  userReasoning String?
  visualCues    Json    @default("[]")

  // Relationships
  session            UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  relatedScreenshots Screenshot[]

  @@index([sessionId, timestamp])
  @@index([type])
  @@index([url])
  @@map("interactions")
}

// Screenshot data with metadata
model Screenshot {
  id            String  @id @default(uuid())
  sessionId     String
  interactionId String?

  // Screenshot metadata
  timestamp BigInt
  eventType String // 'click', 'navigation', 'burst_nav_1', etc.

  // Storage information
  s3Key      String? // S3 object key
  dataUrl    String? // Base64 data URL (temporary)
  compressed Boolean @default(false)
  format     String  @default("png") // 'png', 'webp', 'jpg'
  fileSize   Int? // bytes

  // Visual metadata
  viewport Json // Viewport dimensions and scroll position
  quality  Float @default(0) // Quality score 0-100

  // Vision analysis results
  visionAnalysis Json? // OpenAI Vision API results
  userPsychology Json? // Extracted user psychology insights

  // Relationships
  session     UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  interaction Interaction?   @relation(fields: [interactionId], references: [id])

  @@index([sessionId, timestamp])
  @@index([eventType])
  @@map("screenshots")
}

// Session archives for compressed storage
model SessionArchive {
  id        String @id @default(uuid())
  sessionId String

  // Archive metadata
  version String @default("1.0")
  format  String @default("zip") // 'zip', 'tar.gz'

  // Storage information
  s3Bucket String
  s3Key    String
  fileSize BigInt // bytes
  checksum String // SHA256 hash

  // Archive contents
  manifest         Json // File manifest with checksums
  compressionRatio Float? // Original size / compressed size

  // Archive status
  status    ArchiveStatus @default(CREATING)
  createdAt DateTime      @default(now())

  // Relationships
  session UnifiedSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([status])
  @@map("session_archives")
}

// Training data and model information
model TrainingData {
  id        String @id @default(uuid())
  sessionId String

  // Training file information
  openaiFileId String? // OpenAI file ID
  jsonlData    String? // JSONL training data
  fileSize     Int? // bytes

  // Training job information
  trainingJobId String? // OpenAI fine-tuning job ID
  modelId       String? // Resulting model ID

  // Training configuration
  hyperparameters Json @default("{}")
  trainingConfig  Json @default("{}")

  // Training results
  trainingMetrics   Json? // Training loss, accuracy, etc.
  validationResults Json? // Model validation results

  // Quality assessment
  trainingQuality     Float @default(0)
  expectedPerformance Float @default(0)

  // Status and timing
  status      TrainingStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  completedAt DateTime?

  @@index([sessionId])
  @@index([status])
  @@index([modelId])
  @@map("training_data")
}

// System configuration and settings
model SystemConfig {
  id          String  @id @default(uuid())
  key         String  @unique
  value       Json
  description String?
  category    String  @default("general")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}

// Quality control and validation results
model QualityReport {
  id        String @id @default(uuid())
  sessionId String

  // Quality scores
  overallScore      Float
  completenessScore Float
  reliabilityScore  Float
  accuracyScore     Float

  // Validation results
  validationResults Json @default("{}")
  issues            Json @default("[]")
  recommendations   Json @default("[]")

  // Report metadata
  generatedAt DateTime @default(now())
  version     String   @default("1.0")

  @@index([sessionId])
  @@index([overallScore])
  @@map("quality_reports")
}

// User psychology profile extracted from session data
model PsychologyProfile {
  id        String @id @default(uuid())
  sessionId String @unique

  // Core psychology traits
  dominantPersonality PersonalityType
  emotionalState      EmotionalState
  decisionMakingStyle DecisionMakingStyle

  // Psychology metrics (0-100 scale)
  trustLevel       Float @default(50)
  urgencyLevel     Float @default(30)
  priceSensitivity Float @default(40)
  socialInfluence  Float @default(35)

  // Detailed insights and analysis
  insights            Json @default("[]") // Array of PsychologyInsight objects
  behaviorPredictions Json @default("[]") // Array of predicted behaviors
  recommendations     Json @default("[]") // Array of recommendations

  // Analysis confidence and metadata
  confidence          Float    @default(0)
  processingTimestamp DateTime @default(now())

  @@index([sessionId])
  @@index([dominantPersonality])
  @@index([emotionalState])
  @@index([confidence])
  @@map("psychology_profiles")
}

// Context enhancement results
model ContextEnhancement {
  id        String @id @default(uuid())
  sessionId String @unique

  // Enhanced context data
  pageStructure      Json @default("{}")
  userIntent         Json @default("{}")
  navigationPattern  Json @default("{}")
  shoppingBehavior   Json @default("{}")
  contextualInsights Json @default("[]")

  // Quality and value metrics
  trainingValue       Float    @default(0)
  processingTimestamp DateTime @default(now())

  @@index([sessionId])
  @@index([trainingValue])
  @@map("context_enhancements")
}

// Vision analysis cache for screenshots
model VisionAnalysisCache {
  id           String @id @default(uuid())
  screenshotId String
  analysisType String // 'comprehensive', 'psychology', 'navigation', 'ui_elements'

  // Cached analysis results
  analysisResult Json
  qualityScore   Float @default(0)

  // Cache metadata
  createdAt DateTime @default(now())
  expiresAt DateTime
  hitCount  Int      @default(0)

  @@unique([screenshotId, analysisType])
  @@index([expiresAt])
  @@map("vision_analysis_cache")
}

// Enums
enum SessionType {
  HUMAN // Human crowdsource collection
  AUTOMATED // Automated training collection
  HYBRID // Combination of both
}

enum SessionStatus {
  ACTIVE // Currently collecting data
  PAUSED // Temporarily paused
  COMPLETED // Data collection finished
  PROCESSING // Being processed
  ARCHIVED // Archived and compressed
  FAILED // Failed during collection/processing
}

enum ProcessingStatus {
  PENDING // Waiting to be processed
  VALIDATING // Data validation in progress
  ENHANCING // Context enhancement in progress
  PSYCHOLOGY_ANALYSIS // Psychology insights extraction in progress
  TRAINING // Training data generation in progress
  ARCHIVING // Creating archive
  COMPLETED // All processing complete
  FAILED // Processing failed
}

enum InteractionType {
  CLICK
  INPUT
  SCROLL
  NAVIGATION
  HOVER
  FOCUS
  BLUR
  FORM_SUBMIT
  KEY_PRESS
  DRAG
  DROP
  TOUCH
}

enum ArchiveStatus {
  CREATING // Archive creation in progress
  UPLOADING // Uploading to S3
  COMPLETED // Archive ready
  FAILED // Archive creation failed
}

enum TrainingStatus {
  PENDING // Waiting to generate training data
  GENERATING // Generating training data
  UPLOADING // Uploading to OpenAI
  TRAINING // Model training in progress
  COMPLETED // Training completed successfully
  FAILED // Training failed
}

enum PersonalityType {
  ANALYTICAL // Research-heavy, detail-oriented
  IMPULSIVE // Quick decisions, emotion-driven
  CAUTIOUS // Risk-averse, seeks reassurance
  SOCIAL // Influenced by others, community-focused
  PRACTICAL // Value-focused, utility-driven
}

enum EmotionalState {
  EXCITED // High energy, positive engagement
  FRUSTRATED // Negative experience, obstacles encountered
  CONFIDENT // Self-assured, decisive behavior
  UNCERTAIN // Hesitant, needs more information
  NEUTRAL // Balanced, no strong emotional indicators
}

enum DecisionMakingStyle {
  QUICK // Fast decisions with minimal research
  DELIBERATE // Thoughtful, measured approach
  COMPARISON_HEAVY // Extensive comparison shopping
  RESEARCH_DRIVEN // Deep research before deciding
}
