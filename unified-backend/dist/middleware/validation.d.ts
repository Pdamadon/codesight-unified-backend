import { Request, Response, NextFunction } from 'express';
import { ValidationChain } from 'express-validator';
export declare const validationMiddleware: (req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>> | undefined;
export declare const validate: (validations: ValidationChain[]) => (req: Request, res: Response, next: NextFunction) => Promise<Response<any, Record<string, any>> | undefined>;
export declare const validateSessionId: (value: string) => boolean;
export declare const validateTimestamp: (value: any) => boolean;
export declare const validateSelector: (value: string) => boolean;
export declare const validateInteractionType: (value: string) => boolean;
export declare const validateQualityScore: (value: any) => boolean;
export declare const validateCoordinates: (value: any) => boolean;
export declare const validateViewport: (value: any) => boolean;
export declare const sanitizeInput: (req: Request, res: Response, next: NextFunction) => void;
export declare const validateRequestSize: (maxSize?: number) => (req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>> | undefined;
export declare const validateContentType: (allowedTypes?: string[]) => (req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>;
export declare const rateLimitByUser: (maxRequests: number, windowMs: number) => (req: any, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>;
export declare const validateFileUpload: (req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>;
