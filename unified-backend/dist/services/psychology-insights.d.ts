import { PrismaClient } from "@prisma/client";
import { OpenAIIntegrationService } from "./openai-integration-clean";
interface PsychologyInsight {
    category: 'emotional' | 'cognitive' | 'behavioral' | 'social' | 'trust';
    factor: string;
    confidence: number;
    evidence: string[];
    impact: 'low' | 'medium' | 'high';
    description: string;
}
interface UserPsychologyProfile {
    sessionId: string;
    dominantPersonality: 'analytical' | 'impulsive' | 'cautious' | 'social' | 'practical';
    emotionalState: 'excited' | 'frustrated' | 'confident' | 'uncertain' | 'neutral';
    decisionMakingStyle: 'quick' | 'deliberate' | 'comparison_heavy' | 'research_driven';
    trustLevel: number;
    urgencyLevel: number;
    pricesensitivity: number;
    socialInfluence: number;
    insights: PsychologyInsight[];
    behaviorPredictions: string[];
    recommendations: string[];
    confidence: number;
    processingTimestamp: Date;
}
export declare class PsychologyInsightsService {
    private prisma;
    private logger;
    private openaiService;
    private emotionalTriggers;
    private cognitivePatterns;
    private behavioralIndicators;
    private trustSignals;
    constructor(prisma: PrismaClient, openaiService: OpenAIIntegrationService);
    private initializePsychologyPatterns;
    extractUserPsychologyInsights(sessionId: string): Promise<UserPsychologyProfile>;
    private analyzeVisualPsychology;
    private analyzeBehavioralPsychology;
    private analyzeDecisionMakingPatterns;
    private synthesizePsychologyProfile;
    private extractVisualTriggers;
    private analyzeColorPsychology;
    private analyzeLayoutInfluence;
    private identifyTrustElements;
    private identifyPersuasionTechniques;
    private analyzeClickPatterns;
    private analyzeNavigationStyle;
    private analyzeTimePatterns;
    private calculateInteractionIntensity;
    private calculateDecisionSpeed;
    private calculateExplorationDepth;
    private identifyPersonalityTraits;
    private inferEmotionalState;
    private determineDecisionMakingStyle;
    private isDecisionPoint;
    private calculatePriceInfluence;
    private calculateSocialProofInfluence;
    private calculateUrgencyInfluence;
    private calculateTrustInfluence;
    private calculateConvenienceInfluence;
    private calculateTrustLevel;
    private calculateUrgencyLevel;
    private calculatePriceSensitivity;
    private calculateSocialInfluence;
    private generateDetailedInsights;
    private generateBehaviorPredictions;
    private generateRecommendations;
    private calculateOverallConfidence;
    private calculateAverageClickTime;
    private analyzeClickDistribution;
    private identifyHesitationPatterns;
    private countBacktracking;
    private calculateVariability;
    private calculateAverageDecisionTime;
    private calculateOverallDecisionSpeed;
    private identifyDecisionBarriers;
    private identifyDecisionMotivators;
    private determineDominantPersonality;
    private savePsychologyProfile;
    private updateSessionWithPsychology;
    batchExtractPsychologyInsights(sessionIds: string[]): Promise<Map<string, UserPsychologyProfile>>;
    getPsychologyStats(): Promise<any>;
    getPsychologyInsights(sessionId: string): Promise<UserPsychologyProfile | null>;
    generatePsychologyTrainingData(sessionId: string): Promise<any>;
    private generatePsychologyTrainingExamples;
    private predictActionBasedOnPersonality;
    private predictEmotionalResponse;
    private calculateEngagementLevel;
    private calculateConversionProbability;
    private identifyKeyDecisionFactors;
    private predictDecisionTime;
    private calculatePsychologyTrainingValue;
}
export {};
