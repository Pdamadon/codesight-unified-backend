export declare class OpenAIIntegrationService {
    private openai;
    private logger;
    private prisma;
    constructor();
    generateTrainingData(session: any): Promise<any>;
    private extractHumanBehavior;
    private parseUserIntent;
    private analyzeNavigationSequence;
    private extractSelectors;
    private inferReasoning;
    private determineStepSuccess;
    private analyzeProductSelection;
    private extractFinalSelection;
    private identifyDecisionFactors;
    private analyzeSiteContext;
    private detectFramework;
    private detectPageType;
    private formatForOpenAI;
    private formatUserPrompt;
    private formatAssistantResponse;
    private generateStrategyReasoning;
    private generateExpectedOutcome;
    private generateAdaptationStrategy;
    private assessTrainingQuality;
    private extractQueryFromAudio;
    private extractContextFromAudio;
    uploadTrainingFile(jsonlData: string, metadata: any): Promise<string>;
    createFineTuningJob(fileId: string, config?: any): Promise<string>;
    monitorTrainingJob(jobId: string): Promise<any>;
    testModel(modelId: string, testPrompt: string): Promise<any>;
    analyzeScreenshotsAdvanced(screenshots: any[], options?: {
        analysisType?: 'comprehensive' | 'psychology' | 'navigation' | 'ui_elements';
        batchSize?: number;
        includeCache?: boolean;
        detail?: 'low' | 'high' | 'auto';
    }): Promise<any>;
    private processBatchScreenshots;
    private analyzeScreenshotDetailed;
    private buildAnalysisPrompt;
    private determineImageDetail;
    private getMaxTokensForAnalysis;
    private parseStructuredAnalysis;
    private generateAnalysisScores;
    private cacheAnalysis;
    private getCachedAnalysis;
    private getScreenshotUrl;
    private mergeAnalysisResults;
    private synthesizePsychologyInsights;
    private synthesizeNavigationInsights;
    private synthesizeUIInsights;
    private generateOverallInsights;
    private calculateOverallQualityScore;
    analyzeScreenshots(screenshots: any[]): Promise<any>;
    analyzeScreenshot(screenshot: any): Promise<any>;
    private extractPsychologyInsights;
    private calculateVisionQualityScore;
    batchProcessSessions(sessionIds: string[]): Promise<any>;
    createTrainingPipeline(sessionIds: string[], config?: any): Promise<any>;
    updateTrainingStatus(jobId: string): Promise<any>;
    private mapOpenAIStatusToInternal;
    getTrainingStats(): Promise<any>;
    validateTrainingData(jsonlData: string): Promise<any>;
    getFileInfo(fileId: string): Promise<any>;
    listFiles(purpose?: string, limit?: number): Promise<any[]>;
    downloadFile(fileId: string): Promise<string>;
    deleteFile(fileId: string): Promise<boolean>;
    uploadTrainingFileAdvanced(jsonlData: string, metadata: any, options?: {
        validateBeforeUpload?: boolean;
        chunkSize?: number;
        retryAttempts?: number;
    }): Promise<any>;
    private saveFileMetadata;
    getFileUsageStats(): Promise<any>;
    batchDeleteFiles(fileIds: string[]): Promise<any>;
    manageFileLifecycle(): Promise<any>;
    cleanupOldTrainingFiles(daysOld?: number): Promise<any>;
    getTrainingStatus(jobId: string): Promise<any>;
    createAdvancedFineTuningJob(fileId: string, config?: {
        model?: string;
        suffix?: string;
        epochs?: number;
        batchSize?: number;
        learningRateMultiplier?: number;
        validationFile?: string;
        computeClassificationMetrics?: boolean;
        classificationNClasses?: number;
        classificationPositiveClass?: string;
        classificationBetas?: number[];
    }): Promise<any>;
    private calculateOptimalTrainingConfig;
    private calculateOptimalEpochs;
    private calculateOptimalBatchSize;
    private calculateOptimalLearningRate;
    private estimateTrainingDuration;
    private saveFineTuningJob;
    getJobStatusDetailed(jobId: string): Promise<any>;
    getJobEvents(jobId: string, limit?: number): Promise<any[]>;
    private calculateJobProgress;
    private extractTrainingMetrics;
    listFineTuningJobs(options?: {
        limit?: number;
        after?: string;
        status?: string;
        includeMetrics?: boolean;
    }): Promise<any>;
    cancelFineTuningJob(jobId: string): Promise<any>;
    getFineTuningStats(): Promise<any>;
    listFineTunedModels(): Promise<any[]>;
    testModelComprehensive(modelId: string, testCases: Array<{
        scenario: string;
        prompt: string;
        expectedBehavior?: string;
        context?: any;
    }>, options?: {
        temperature?: number;
        maxTokens?: number;
        includeMetrics?: boolean;
        compareWithBaseline?: boolean;
    }): Promise<any>;
    private analyzeResponseQuality;
    private extractKeywords;
    private calculateKeywordOverlap;
    private calculateTestMetrics;
    private calculateConsistencyScore;
    private compareWithBaseline;
    private generateTestingRecommendations;
    benchmarkModel(modelId: string): Promise<any>;
    private calculateBenchmarkScore;
    private assignPerformanceGrade;
    validateModelDeployment(modelId: string): Promise<any>;
    private performSafetyCheck;
}
