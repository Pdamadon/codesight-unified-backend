/**
 * Clear World Model Database - Fixed Version
 * 
 * Removes all existing world model data to start fresh
 * with improved classification and parsing logic
 * 
 * FIXED: Uses correct database name "codesight-worldmodel" matching working scripts
 */

import { WorldModelService } from './dist/services/world-model/database/service.js';

async function clearDatabase() {
  console.log('üßπ Clearing World Model Database\n');
  console.log('=================================');
  
  // FIXED: Use same database name as working check-world-model-data.js
  const worldModel = new WorldModelService(
    "mongodb+srv://pdamadon:Locoman123@codesight-worldmodel.rt7hek9.mongodb.net/?retryWrites=true&w=majority&appName=codesight-worldmodel",
    "codesight-worldmodel"  // FIXED: Changed from "world_model" to "codesight-worldmodel"
  );

  try {
    console.log('üîó Connecting to MongoDB Atlas...');
    await worldModel.connect();
    console.log('‚úÖ Connected successfully\n');

    // Check current data before clearing
    console.log('üìä Current Database Status:');
    
    const domainCount = await worldModel.db.collection('world_model_domains').countDocuments();
    const categoryCount = await worldModel.db.collection('world_model_categories').countDocuments();
    const productCount = await worldModel.db.collection('world_model_products').countDocuments();
    
    console.log(`   Domains: ${domainCount}`);
    console.log(`   Categories: ${categoryCount}`);
    console.log(`   Products: ${productCount}`);
    
    if (domainCount === 0 && categoryCount === 0 && productCount === 0) {
      console.log('\n‚úÖ Database is already empty - nothing to clear');
      return;
    }
    
    // Show what we're about to delete
    console.log('\nüóÇÔ∏è Current Data Preview:');
    
    const domains = await worldModel.db.collection('world_model_domains').find({}).toArray();
    domains.forEach(domain => {
      console.log(`   Domain: ${domain.siteName} (${domain.domain})`);
    });
    
    const categories = await worldModel.db.collection('world_model_categories').find({}).limit(5).toArray();
    console.log(`\n   Sample Categories (${categories.length}):${categories.length === 0 ? ' (none)' : ''}`);
    categories.forEach(cat => {
      console.log(`     "${cat.categoryName}" (${cat.categoryPath})`);
    });
    
    const products = await worldModel.db.collection('world_model_products').find({}).limit(5).toArray(); 
    console.log(`\n   Sample Products (${products.length}):${products.length === 0 ? ' (none)' : ''}`);
    products.forEach(prod => {
      console.log(`     "${prod.productName}" - $${prod.currentState?.price || 'N/A'}`);
    });
    
    // Confirm deletion
    console.log('\n‚ö†Ô∏è  This will permanently delete all world model data.');
    console.log('   This includes domains, categories, products, and relationships.');
    console.log('   The data can be regenerated by re-running the ingestion.');
    
    // Clear all collections
    console.log('\nüóëÔ∏è Clearing Collections...');
    
    const productsDeleted = await worldModel.db.collection('world_model_products').deleteMany({});
    console.log(`   ‚úÖ Deleted ${productsDeleted.deletedCount} products`);
    
    const categoriesDeleted = await worldModel.db.collection('world_model_categories').deleteMany({});
    console.log(`   ‚úÖ Deleted ${categoriesDeleted.deletedCount} categories`);
    
    const domainsDeleted = await worldModel.db.collection('world_model_domains').deleteMany({});
    console.log(`   ‚úÖ Deleted ${domainsDeleted.deletedCount} domains`);
    
    // Verify deletion
    console.log('\nüìä Database Status After Clearing:');
    const finalDomainCount = await worldModel.db.collection('world_model_domains').countDocuments();
    const finalCategoryCount = await worldModel.db.collection('world_model_categories').countDocuments();
    const finalProductCount = await worldModel.db.collection('world_model_products').countDocuments();
    
    console.log(`   Domains: ${finalDomainCount}`);
    console.log(`   Categories: ${finalCategoryCount}`);
    console.log(`   Products: ${finalProductCount}`);
    
    if (finalDomainCount === 0 && finalCategoryCount === 0 && finalProductCount === 0) {
      console.log('\nüéâ Database successfully cleared!');
      console.log('\nüîÑ Next Steps:');
      console.log('   1. Update world model parser with improved classification logic');
      console.log('   2. Re-run ingestion with UnifiedSession ingester: node test-improved-unified-session-ingester.js');
      console.log('   3. Verify clean data with proper product/category classification');
      console.log('   4. Check that real domains (H&M, Gap, Nordstrom) are extracted');
    } else {
      console.log('\n‚ùå Warning: Some data may not have been cleared');
    }
    
  } catch (error) {
    console.error('‚ùå Error clearing database:', error);
    console.error('Error details:', {
      name: error.name,
      message: error.message,
      code: error.code
    });
    throw error;
  } finally {
    await worldModel.disconnect();
    console.log('\nüîå Disconnected from MongoDB');
  }
}

clearDatabase().catch(console.error);