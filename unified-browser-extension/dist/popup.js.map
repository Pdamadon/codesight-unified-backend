{"version":3,"file":"popup.js","mappings":"AAEA","sources":["webpack://unified-codesight-tracker/./popup.js"],"sourcesContent":["// Popup script for CodeSight Tracker extension\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const loadingDiv = document.getElementById('loading');\n  const contentDiv = document.getElementById('content');\n  const consentDialog = document.getElementById('consentDialog');\n  const errorDiv = document.getElementById('error');\n  const startBtn = document.getElementById('startBtn');\n  const stopBtn = document.getElementById('stopBtn');\n  const downloadBtn = document.getElementById('downloadBtn');\n  const downloadControls = document.getElementById('downloadControls');\n  const settingsLink = document.getElementById('settingsLink');\n  const acceptBtn = document.getElementById('acceptBtn');\n  const declineBtn = document.getElementById('declineBtn');\n  \n  // Status elements\n  const trackingStatusEl = document.getElementById('trackingStatus');\n  const sessionIdEl = document.getElementById('sessionId');\n  const eventCountEl = document.getElementById('eventCount');\n  const screenshotCountEl = document.getElementById('screenshotCount');\n  const durationEl = document.getElementById('duration');\n  const qualityScoreEl = document.getElementById('qualityScore');\n  \n  let updateInterval = null;\n  let generatedTask = null;\n  \n  // Check for existing consent\n  chrome.storage.local.get(['userConsent'], async (result) => {\n    if (result.userConsent === true) {\n      // User has already consented, initialize normally\n      await initializeExtension();\n    } else {\n      // Show consent dialog\n      loadingDiv.style.display = 'none';\n      consentDialog.style.display = 'block';\n    }\n  });\n  \n  // Consent handlers\n  acceptBtn.addEventListener('click', async () => {\n    chrome.storage.local.set({ userConsent: true }, async () => {\n      consentDialog.style.display = 'none';\n      await initializeExtension();\n    });\n  });\n  \n  declineBtn.addEventListener('click', () => {\n    chrome.storage.local.set({ userConsent: false }, () => {\n      consentDialog.style.display = 'none';\n      showError('Data collection consent is required to use this shopping assistant.');\n    });\n  });\n  \n  // Initialize extension after consent\n  async function initializeExtension() {\n    try {\n      await updateStatus();\n      await generateTaskForCurrentSite();\n      loadingDiv.style.display = 'none';\n      contentDiv.style.display = 'block';\n      \n      // Start periodic updates\n      updateInterval = setInterval(updateStatus, 1000);\n    } catch (error) {\n      showError('Failed to initialize: ' + error.message);\n    }\n  }\n  \n  // Update status from current tab\n  async function updateStatus() {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      \n      // Send message to content script\n      const response = await chrome.tabs.sendMessage(tab.id, { action: 'GET_STATUS' });\n      \n      if (response) {\n        updateUI(response);\n      }\n    } catch (error) {\n      // Content script might not be injected yet\n      updateUI({\n        isTracking: false,\n        sessionId: null,\n        eventCount: 0,\n        screenshotCount: 0,\n        duration: 0,\n        quality: 0\n      });\n    }\n  }\n  \n  // Update UI with status data\n  function updateUI(status) {\n    if (status.isTracking) {\n      trackingStatusEl.textContent = 'Active';\n      trackingStatusEl.className = 'status-value status-active';\n      sessionIdEl.textContent = status.sessionId || '-';\n      eventCountEl.textContent = status.eventCount || 0;\n      screenshotCountEl.textContent = status.screenshotCount || 0;\n      durationEl.textContent = formatDuration(status.duration || 0);\n      qualityScoreEl.textContent = (status.quality || 0) + '%';\n      \n      startBtn.disabled = true;\n      stopBtn.disabled = false;\n      downloadControls.style.display = 'block';\n    } else {\n      trackingStatusEl.textContent = 'Inactive';\n      trackingStatusEl.className = 'status-value status-inactive';\n      sessionIdEl.textContent = '-';\n      eventCountEl.textContent = '0';\n      screenshotCountEl.textContent = '0';\n      durationEl.textContent = '0s';\n      qualityScoreEl.textContent = '0%';\n      \n      startBtn.disabled = false;\n      stopBtn.disabled = true;\n      downloadControls.style.display = 'none';\n    }\n  }\n  \n  // Format duration in seconds\n  function formatDuration(ms) {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n  \n  // Start tracking\n  startBtn.addEventListener('click', async () => {\n    try {\n      errorDiv.style.display = 'none';\n      startBtn.disabled = true;\n      \n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      \n      // Generate session ID\n      const sessionId = generateSessionId();\n      \n      // Send start message to content script\n      const response = await chrome.tabs.sendMessage(tab.id, {\n        action: 'START_TRACKING',\n        sessionId,\n        generatedTask,\n        config: {\n          screenshotEnabled: true,\n          compressionEnabled: true,\n          privacyMode: true\n        }\n      });\n      \n      if (response && response.success) {\n        await updateStatus();\n      } else {\n        throw new Error('Failed to start tracking');\n      }\n    } catch (error) {\n      showError('Failed to start tracking: ' + error.message);\n      startBtn.disabled = false;\n    }\n  });\n  \n  // Stop tracking\n  stopBtn.addEventListener('click', async () => {\n    try {\n      errorDiv.style.display = 'none';\n      stopBtn.disabled = true;\n      \n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      \n      // Send stop message to content script\n      const response = await chrome.tabs.sendMessage(tab.id, {\n        action: 'STOP_TRACKING'\n      });\n      \n      if (response && response.success) {\n        await updateStatus();\n        \n        // Show summary if available\n        if (response.data) {\n          showSummary(response.data);\n        }\n      } else {\n        throw new Error('Failed to stop tracking');\n      }\n    } catch (error) {\n      showError('Failed to stop tracking: ' + error.message);\n      stopBtn.disabled = false;\n    }\n  });\n\n  // Download session data\n  downloadBtn.addEventListener('click', async () => {\n    try {\n      errorDiv.style.display = 'none';\n      downloadBtn.disabled = true;\n      downloadBtn.textContent = 'Downloading...';\n      \n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      \n      // Get session data from content script\n      const response = await chrome.tabs.sendMessage(tab.id, {\n        action: 'GET_SESSION_DATA'\n      });\n      \n      if (response && response.success && response.data) {\n        downloadSessionAsJSON(response.data);\n        downloadBtn.textContent = 'Downloaded!';\n        setTimeout(() => {\n          downloadBtn.textContent = 'Download Session Data';\n        }, 2000);\n      } else {\n        throw new Error('No session data available');\n      }\n    } catch (error) {\n      showError('Failed to download session data: ' + error.message);\n    } finally {\n      downloadBtn.disabled = false;\n    }\n  });\n  \n  // Settings link\n  settingsLink.addEventListener('click', (e) => {\n    e.preventDefault();\n    chrome.runtime.openOptionsPage();\n  });\n  \n  // Generate task for current site\n  async function generateTaskForCurrentSite() {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      const currentUrl = tab.url;\n      \n      // Skip task generation for non-http(s) URLs\n      if (!currentUrl || (!currentUrl.startsWith('http://') && !currentUrl.startsWith('https://'))) {\n        console.log('Skipping task generation for non-web URL:', currentUrl);\n        return;\n      }\n      \n      console.log('Generating task for site:', currentUrl);\n      \n      // Show task display section immediately\n      const taskDisplayEl = document.getElementById('taskDisplay');\n      if (taskDisplayEl) {\n        taskDisplayEl.style.display = 'block';\n        document.getElementById('taskTitle').textContent = 'Generating task...';\n        document.getElementById('taskDescription').textContent = 'Please wait while we create a personalized shopping task for this website.';\n      }\n      \n      // Call the backend API to generate a task\n      const apiBaseUrl = process.env.API_BASE_URL || 'https://gentle-vision-production.up.railway.app';\n      const apiKey = process.env.API_KEY || 'production-key-placeholder';\n      \n      const response = await fetch(`${apiBaseUrl}/api/tasks/generate?website=${encodeURIComponent(currentUrl)}&userLevel=beginner`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': apiKey\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.task) {\n          generatedTask = data.task;\n          console.log('Generated task:', generatedTask.title);\n          updateTaskDisplay();\n        } else {\n          console.error('Task generation failed:', data.error || 'Unknown error');\n          console.log('Task generation response:', data);\n        }\n      } else {\n        const errorText = await response.text().catch(() => 'Could not read error response');\n        console.error('Failed to call task generation API:', response.status, response.statusText);\n        console.error('Error response:', errorText);\n      }\n    } catch (error) {\n      console.error('Error generating task:', error);\n      // Don't show error to user - just proceed without generated task\n    }\n  }\n\n  // Generate session ID\n  function generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  \n  // Update task display in popup\n  function updateTaskDisplay() {\n    const taskDisplayEl = document.getElementById('taskDisplay');\n    const taskTitleEl = document.getElementById('taskTitle');\n    const taskDescriptionEl = document.getElementById('taskDescription');\n    const regenerateBtn = document.getElementById('regenerateBtn');\n    \n    if (generatedTask && taskDisplayEl) {\n      taskTitleEl.textContent = generatedTask.title;\n      taskDescriptionEl.textContent = generatedTask.description;\n      taskDisplayEl.style.display = 'block';\n      \n      // Update regenerate button if it exists\n      if (regenerateBtn) {\n        regenerateBtn.onclick = async () => {\n          regenerateBtn.textContent = 'Generating...';\n          regenerateBtn.disabled = true;\n          await generateTaskForCurrentSite();\n          regenerateBtn.textContent = 'Generate New Task';\n          regenerateBtn.disabled = false;\n        };\n      }\n    }\n  }\n\n  // Show error message\n  function showError(message) {\n    errorDiv.textContent = message;\n    errorDiv.style.display = 'block';\n    loadingDiv.style.display = 'none';\n    contentDiv.style.display = 'block';\n  }\n  \n  // Download session data as JSON\n  function downloadSessionAsJSON(sessionData) {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `codesight-session-${sessionData.sessionId || 'unknown'}-${timestamp}.json`;\n    \n    const dataStr = JSON.stringify(sessionData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    \n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    console.log('Session data downloaded:', filename);\n  }\n\n  // Show session summary\n  function showSummary(data) {\n    // Could show a modal or notification with session summary\n    console.log('Session completed:', data);\n  }\n  \n  // Cleanup on popup close\n  window.addEventListener('unload', () => {\n    if (updateInterval) {\n      clearInterval(updateInterval);\n    }\n  });\n});"],"names":[],"sourceRoot":""}