new class{constructor(){this.activeSessions=new Map,this.screenshotQueue=[],this.dataQueue=[],this.isProcessingQueue=!1,this.websocketConnection=null,this.reconnectAttempts=0,this.config={backendUrl:"wss://gentle-vision-production.up.railway.app/ws",apiKey:"af5dec9fb3cfda4856651e91c1c5f9dcfdbe66fcdd6ebbfbf1920b622198106f",maxScreenshotSize:2097152,compressionQuality:.8,burstModeDelay:300,maxQueueSize:100},this.initializeService()}initializeService(){chrome.runtime.onMessage.addListener((e,t,s)=>(this.handleMessage(e,t,s),!0)),chrome.tabs.onUpdated.addListener((e,t,s)=>{this.handleTabUpdate(e,t,s)}),chrome.tabs.onActivated.addListener(e=>{this.handleTabActivation(e)}),chrome.tabs.onRemoved.addListener(e=>{this.handleTabRemoved(e)}),this.cleanupOldData(),this.startPeriodicCleanup(),this.loadSettingsAndConnect(),this.clearStorageQuota(),console.log("Unified Background Service initialized v2.0")}async handleMessage(e,t,s){try{switch(e.action){case"CAPTURE_SCREENSHOT":const o=await this.captureScreenshot(t.tab.id,e.data);s({success:!0,screenshotId:o?.id});break;case"START_SESSION":await this.startSession(t.tab.id,e.sessionId,e.config),s({success:!0});break;case"STOP_SESSION":s({success:!0,data:await this.stopSession(t.tab.id)});break;case"CONNECT_WEBSOCKET":await this.connectWebSocket(e.url),s({success:!0,connected:!!this.websocketConnection});break;case"SEND_DATA":await this.sendDataToBackend(e.data),s({success:!0});break;case"BURST_CAPTURE":await this.startBurstCapture(t.tab.id,e.trigger,e.count),s({success:!0});break;case"GET_SESSION_STATUS":s({success:!0,status:this.getSessionStatus(t.tab.id)});break;case"START_BACKEND_SESSION":await this.startBackendSession(e.sessionId,e.config,e.generatedTask),s({success:!0});break;case"STOP_BACKEND_SESSION":await this.stopBackendSession(e.sessionId),s({success:!0});break;case"FETCH_TASK":console.log("Background: FETCH_TASK message received"),s(await this.fetchTaskFromAPI(e.sessionId,e.difficulty));break;case"ping":s({success:!0,message:"Background script is working",connected:!!this.websocketConnection});break;default:s({success:!1,error:"Unknown action"})}}catch(e){console.error("Background: Message handling error:",e),s({success:!1,error:e.message})}}async captureScreenshot(e,t={}){try{const s=await chrome.tabs.captureVisibleTab(null,{format:"png",quality:100});if(!s)throw new Error("Failed to capture screenshot");const o=await this.convertToWebP(s,this.config.compressionQuality),n={id:this.generateId(),tabId:e,timestamp:Date.now(),trigger:t.trigger||"manual",url:t.url,viewport:t.viewport,dataUrl:o,originalSize:s.length,compressedSize:o.length,compressionRatio:100*(1-o.length/s.length)};return this.addToScreenshotQueue(n),await this.storeScreenshot(n),console.log("Background: Screenshot captured",{id:n.id,trigger:n.trigger,compressionRatio:`${n.compressionRatio.toFixed(1)}%`}),n}catch(e){return console.error("Background: Screenshot capture failed:",e),null}}async convertToWebP(e,t=.8){try{return console.log("Background: WebP conversion skipped in service worker, using original PNG"),e}catch(t){return console.log("Background: WebP conversion failed, using original PNG"),e}}async startBurstCapture(e,t,s=5){const o=this.generateId();console.log("Background: Starting burst capture",{burstId:o,trigger:t,count:s});for(let n=0;n<s;n++)setTimeout(async()=>{try{await this.captureScreenshot(e,{trigger:`burst_${t}_${n+1}`,burstId:o,burstIndex:n+1,burstTotal:s})}catch(e){console.error(`Background: Burst capture ${n+1} failed:`,e)}},n*this.config.burstModeDelay)}async detectAndCaptureModals(e){try{const t=await chrome.scripting.executeScript({target:{tabId:e},func:()=>{const e=[];return['[role="dialog"]','[role="alertdialog"]',".modal",".popup",".overlay","[data-modal]",'[aria-modal="true"]'].forEach(t=>{document.querySelectorAll(t).forEach(s=>{const o=s.getBoundingClientRect();if(o.width>0&&o.height>0){const n=window.getComputedStyle(s);"none"!==n.display&&"hidden"!==n.visibility&&e.push({selector:t,rect:{x:o.x,y:o.y,width:o.width,height:o.height},zIndex:n.zIndex,isVisible:!0})}})}),e}}),s=t[0]?.result||[];return s.length>0&&(console.log("Background: Detected modals:",s.length),await this.captureScreenshot(e,{trigger:"modal_detected",modalCount:s.length,modals:s})),s}catch(e){return console.error("Background: Modal detection failed:",e),[]}}addToScreenshotQueue(e){this.screenshotQueue.length>=this.config.maxQueueSize&&(console.warn("Background: Screenshot queue full, removing oldest"),this.screenshotQueue.shift()),this.screenshotQueue.push(e),this.screenshotQueue.length>this.config.maxQueueSize/2&&this.cleanupOldScreenshotsFromQueue(),this.processScreenshotQueue()}cleanupOldScreenshotsFromQueue(){const e=Date.now();this.screenshotQueue=this.screenshotQueue.filter(t=>e-t.timestamp<3e5)}async processScreenshotQueue(){if(!this.isProcessingQueue&&0!==this.screenshotQueue.length){this.isProcessingQueue=!0;try{for(;this.screenshotQueue.length>0;){const e=this.screenshotQueue.shift();await this.processScreenshot(e)}}catch(e){console.error("Background: Queue processing error:",e)}finally{this.isProcessingQueue=!1}}}async processScreenshot(e){try{this.websocketConnection&&this.websocketConnection.readyState===WebSocket.OPEN&&await this.sendScreenshotToBackend(e),await this.cleanupOldScreenshots()}catch(e){console.error("Background: Screenshot processing failed:",e)}}async connectWebSocket(e=this.config.backendUrl){try{this.websocketConnection&&this.websocketConnection.close(),this.websocketConnection=new WebSocket(e),this.websocketConnection.onopen=()=>{console.log("Background: WebSocket connected"),this.reconnectAttempts=0,setTimeout(()=>{this.websocketConnection&&this.websocketConnection.readyState===WebSocket.OPEN&&this.authenticateConnection()},100)},this.websocketConnection.onmessage=e=>{this.handleWebSocketMessage(e)},this.websocketConnection.onclose=t=>{console.log("Background: WebSocket disconnected",t.code,t.reason),this.websocketConnection=null;const s=Math.min(5e3*Math.pow(2,this.reconnectAttempts||0),3e4);this.reconnectAttempts=(this.reconnectAttempts||0)+1,console.log(`Background: Reconnecting in ${s}ms (attempt ${this.reconnectAttempts})`),setTimeout(()=>{this.connectWebSocket(e)},s)},this.websocketConnection.onerror=e=>{console.error("Background: WebSocket error:",e)}}catch(e){console.error("Background: WebSocket connection failed:",e)}}async authenticateConnection(){if(this.websocketConnection)if(this.websocketConnection.readyState===WebSocket.OPEN)try{const e={type:"authenticate",data:{apiKey:this.config.apiKey,clientType:"extension",extensionVersion:"2.0.0",browser:this.getBrowserInfo()},timestamp:Date.now()};console.log("Background: Sending authentication message"),this.websocketConnection.send(JSON.stringify(e))}catch(e){console.error("Background: Failed to send authentication message:",e)}else console.log("Background: WebSocket not ready for authentication, state:",this.websocketConnection.readyState);else console.log("Background: No WebSocket connection available for authentication")}async sendScreenshotToBackend(e){if(this.websocketConnection&&this.websocketConnection.readyState===WebSocket.OPEN)try{if(e.compressedSize<this.config.maxScreenshotSize){const t={type:"screenshot_data",sessionId:this.currentSessionId||"unknown",data:{id:e.id,dataUrl:e.dataUrl,timestamp:e.timestamp,metadata:{...e,dataUrl:null}},timestamp:Date.now()};this.websocketConnection.send(JSON.stringify(t))}}catch(e){console.error("Background: Failed to send screenshot to backend:",e)}}handleWebSocketMessage(e){try{const t=JSON.parse(e.data);switch(t.type){case"authentication_success":console.log("Background: Authentication successful"),this.processQueuedData();break;case"authentication_failed":console.error("Background: Authentication failed:",t.data);break;case"capture_request":this.handleCaptureRequest(t);break;case"burst_request":this.handleBurstRequest(t);break;case"config_update":this.updateConfig(t.config);break;default:console.log("Background: Unknown WebSocket message:",t.type)}}catch(e){console.error("Background: WebSocket message handling error:",e)}}async handleCaptureRequest(e){const{tabId:t,trigger:s}=e;if(t)await this.captureScreenshot(t,{trigger:s});else{const e=await chrome.tabs.query({active:!0});for(const t of e)await this.captureScreenshot(t.id,{trigger:s})}}async handleBurstRequest(e){const{tabId:t,trigger:s,count:o}=e;await this.startBurstCapture(t,s,o)}async startSession(e,t,s={}){const o={id:t,tabId:e,startTime:Date.now(),config:{...this.config,...s},screenshots:[],events:[]};this.activeSessions.set(e,o),this.websocketConnection&&this.websocketConnection.send(JSON.stringify({type:"session_start",sessionId:t,data:{tabId:e,url:o.url,title:o.title},timestamp:Date.now()})),console.log("Background: Session started",{sessionId:t,tabId:e})}async stopSession(e){const t=this.activeSessions.get(e);if(!t)return null;t.endTime=Date.now(),t.duration=t.endTime-t.startTime;const s={...t,screenshots:await this.getSessionScreenshots(t.id),finalScreenshot:await this.captureScreenshot(e,{trigger:"session_end"})};return this.websocketConnection&&this.websocketConnection.send(JSON.stringify({type:"session_stop",sessionId:t.id,data:{tabId:e,duration:t.duration,eventCount:t.eventCount||0},timestamp:Date.now()})),this.activeSessions.delete(e),console.log("Background: Session stopped",{sessionId:t.id,duration:`${Math.round(t.duration/1e3)}s`}),s}getSessionStatus(e){const t=this.activeSessions.get(e);return t?{active:!0,sessionId:t.id,duration:Date.now()-t.startTime,screenshotCount:t.screenshots.length,eventCount:t.events.length}:{active:!1}}async handleTabUpdate(e,t,s){this.activeSessions.get(e)&&"complete"===t.status&&t.url&&(await this.startBurstCapture(e,"navigation",3),setTimeout(()=>{this.detectAndCaptureModals(e)},1e3))}async handleTabActivation(e){this.activeSessions.get(e.tabId)&&await this.captureScreenshot(e.tabId,{trigger:"tab_activated"})}handleTabRemoved(e){const t=this.activeSessions.get(e);t&&(console.log("Background: Tab closed, cleaning up session",{tabId:e,sessionId:t.id}),this.activeSessions.delete(e),console.log("Background: Session cleaned up locally (no backend notification for tab closure)"))}startPeriodicCleanup(){setInterval(()=>{this.performPeriodicCleanup()},18e5)}async performPeriodicCleanup(){const e=Date.now();for(const[t,s]of this.activeSessions)e-s.startTime>72e5&&(console.log("Background: Cleaning up old session",{tabId:t,sessionId:s.id}),this.activeSessions.delete(t));this.cleanupOldScreenshotsFromQueue(),await this.cleanupOldScreenshots(),console.log("Background: Periodic cleanup completed",{activeSessions:this.activeSessions.size,queueSize:this.screenshotQueue.length})}async storeScreenshot(e){try{console.log("Background: Screenshot captured, sending to backend immediately"),await this.sendScreenshotToBackend(e)}catch(e){console.error("Background: Screenshot processing failed:",e)}}async getSessionScreenshots(e){try{const t=await chrome.storage.local.get(),s=[];for(const[o,n]of Object.entries(t))if(o.startsWith("screenshot_")&&!o.endsWith("_data")&&n.sessionId===e){const e=`${o}_data`;t[e]&&(n.dataUrl=t[e]),s.push(n)}return s.sort((e,t)=>e.timestamp-t.timestamp)}catch(e){return console.error("Background: Failed to get session screenshots:",e),[]}}async cleanupOldScreenshots(){try{const e=await chrome.storage.local.get(),t=Date.now()-864e5,s=[];for(const[o,n]of Object.entries(e))o.startsWith("screenshot_")&&n.timestamp&&n.timestamp<t&&(s.push(o),s.push(`${o}_data`));s.length>0&&(await chrome.storage.local.remove(s),console.log("Background: Cleaned up",s.length,"old screenshots"))}catch(e){console.error("Background: Screenshot cleanup failed:",e)}}async cleanupOldData(){await this.cleanupOldScreenshots();try{const e=await chrome.storage.local.get(),t=[],s=Date.now()-6048e5;for(const[o,n]of Object.entries(e))n.timestamp&&n.timestamp<s&&t.push(o);t.length>0&&(await chrome.storage.local.remove(t),console.log("Background: Cleaned up",t.length,"old data entries"))}catch(e){console.error("Background: Data cleanup failed:",e)}}updateConfig(e){this.config={...this.config,...e},console.log("Background: Config updated:",e)}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}getBrowserInfo(){return{userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine}}async loadSettingsAndConnect(){try{const e=await chrome.storage.sync.get({backendUrl:this.config.backendUrl,apiKey:this.config.apiKey});this.config.backendUrl=e.backendUrl,e.apiKey&&(this.config.apiKey=e.apiKey),console.log("Background: Loaded settings, connecting to:",this.config.backendUrl),this.connectWebSocket()}catch(e){console.error("Background: Failed to load settings:",e),this.connectWebSocket()}}async sendDataToBackend(e){if(!this.websocketConnection||this.websocketConnection.readyState!==WebSocket.OPEN)return console.warn("Background: WebSocket not connected, queuing data"),this.dataQueue||(this.dataQueue=[]),this.dataQueue.push(e),this.websocketConnection||this.connectWebSocket(),!1;try{const t={type:"interaction_event",data:e,timestamp:Date.now(),sessionId:e.sessionId||"unknown"};return console.log("Background: Sending interaction data to backend:",e.type),this.websocketConnection.send(JSON.stringify(t)),this.processQueuedData(),!0}catch(e){return console.error("Background: Failed to send data to backend:",e),!1}}processQueuedData(){if(!this.dataQueue||0===this.dataQueue.length)return;console.log(`Background: Processing ${this.dataQueue.length} queued items`);const e=[...this.dataQueue];this.dataQueue=[],e.forEach(e=>{this.sendDataToBackend(e)})}async startBackendSession(e,t,s=null){if(this.websocketConnection&&this.websocketConnection.readyState===WebSocket.OPEN)try{this.currentSessionId=e;const o={type:"session_start",sessionId:e,data:{...t,generatedTask:s},timestamp:Date.now()};console.log("Background: Starting backend session:",e),this.websocketConnection.send(JSON.stringify(o))}catch(e){console.error("Background: Failed to start backend session:",e)}else console.warn("Background: Cannot start backend session - WebSocket not connected")}async stopBackendSession(e){if(this.websocketConnection&&this.websocketConnection.readyState===WebSocket.OPEN)try{const t={type:"session_stop",sessionId:e,timestamp:Date.now()};console.log("Background: Stopping backend session:",e),this.websocketConnection.send(JSON.stringify(t))}catch(e){console.error("Background: Failed to stop backend session:",e)}else console.warn("Background: Cannot stop backend session - WebSocket not connected")}async fetchTaskFromAPI(e,t="beginner"){try{console.log("Background: Fetching task from API for session:",e);const s=await fetch("https://gentle-vision-production.up.railway.app/api/test/task/random?difficulty="+t,{method:"GET",headers:{"Content-Type":"application/json"}});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const o=await s.json();return console.log("Background: Task fetched successfully:",o.task?.title),o}catch(e){return console.error("Background: Failed to fetch task from API:",e),{success:!1,error:e.message}}}async clearStorageQuota(){try{const e=await chrome.storage.local.get(),t=[];for(const s of Object.keys(e))s.startsWith("screenshot_")&&t.push(s);t.length>0&&(await chrome.storage.local.remove(t),console.log(`Background: Cleared ${t.length} screenshot entries from storage`))}catch(e){console.error("Background: Failed to clear storage:",e)}}},chrome.runtime.onStartup.addListener(()=>{console.log("Background: Extension startup")}),chrome.runtime.onInstalled.addListener(()=>{console.log("Background: Extension installed/updated")});
//# sourceMappingURL=background.js.map