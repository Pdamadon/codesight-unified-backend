{"version":3,"file":"injected-script.js","mappings":"AAGA","sources":["webpack://unified-codesight-tracker/./injected-script.js"],"sourcesContent":["// Injected script for CodeSight Tracker\n// This script runs in the page context and can access page variables\n\n(function() {\n  'use strict';\n  \n  // Only inject once\n  if (window.__CODESIGHT_INJECTED__) {\n    return;\n  }\n  window.__CODESIGHT_INJECTED__ = true;\n  \n  // Create a communication channel with content script\n  const channel = {\n    send: function(type, data) {\n      window.postMessage({\n        source: 'codesight-injected',\n        type: type,\n        data: data\n      }, '*');\n    }\n  };\n  \n  // Monitor for framework-specific events\n  function detectFrameworkEvents() {\n    // React detection\n    if (window.React || window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {\n      channel.send('framework-detected', { framework: 'React' });\n    }\n    \n    // Vue detection\n    if (window.Vue || window.__VUE__) {\n      channel.send('framework-detected', { framework: 'Vue' });\n    }\n    \n    // Angular detection\n    if (window.angular || window.ng) {\n      channel.send('framework-detected', { framework: 'Angular' });\n    }\n  }\n  \n  // Monitor for e-commerce specific events\n  function monitorEcommerceEvents() {\n    // Override common e-commerce methods if they exist\n    const ecommerceMethods = [\n      'addToCart',\n      'removeFromCart',\n      'updateCart',\n      'checkout',\n      'purchase'\n    ];\n    \n    ecommerceMethods.forEach(method => {\n      if (window[method] && typeof window[method] === 'function') {\n        const original = window[method];\n        window[method] = function(...args) {\n          channel.send('ecommerce-event', {\n            method: method,\n            args: args\n          });\n          return original.apply(this, args);\n        };\n      }\n    });\n  }\n  \n  // Monitor AJAX requests\n  function monitorAjaxRequests() {\n    // XMLHttpRequest monitoring\n    const originalXHR = window.XMLHttpRequest;\n    window.XMLHttpRequest = function() {\n      const xhr = new originalXHR();\n      const originalOpen = xhr.open;\n      const originalSend = xhr.send;\n      \n      xhr.open = function(method, url, ...args) {\n        xhr._codesight = { method, url };\n        return originalOpen.apply(xhr, [method, url, ...args]);\n      };\n      \n      xhr.send = function(data) {\n        if (xhr._codesight) {\n          channel.send('ajax-request', {\n            method: xhr._codesight.method,\n            url: xhr._codesight.url,\n            data: data\n          });\n        }\n        return originalSend.apply(xhr, [data]);\n      };\n      \n      return xhr;\n    };\n    \n    // Fetch monitoring\n    if (window.fetch) {\n      const originalFetch = window.fetch;\n      window.fetch = function(url, options = {}) {\n        channel.send('fetch-request', {\n          url: url,\n          method: options.method || 'GET',\n          headers: options.headers\n        });\n        return originalFetch.apply(window, [url, options]);\n      };\n    }\n  }\n  \n  // Monitor page performance\n  function monitorPerformance() {\n    if (window.performance && window.performance.timing) {\n      window.addEventListener('load', () => {\n        setTimeout(() => {\n          const timing = window.performance.timing;\n          const metrics = {\n            domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,\n            loadComplete: timing.loadEventEnd - timing.navigationStart,\n            firstPaint: timing.responseEnd - timing.navigationStart,\n            domInteractive: timing.domInteractive - timing.navigationStart\n          };\n          \n          channel.send('performance-metrics', metrics);\n        }, 1000);\n      });\n    }\n  }\n  \n  // Initialize monitoring\n  detectFrameworkEvents();\n  monitorEcommerceEvents();\n  monitorAjaxRequests();\n  monitorPerformance();\n  \n  // Listen for messages from content script\n  window.addEventListener('message', (event) => {\n    if (event.source !== window) return;\n    \n    if (event.data && event.data.source === 'codesight-content') {\n      // Handle messages from content script\n      switch (event.data.type) {\n        case 'ping':\n          channel.send('pong', { timestamp: Date.now() });\n          break;\n          \n        case 'get-page-data':\n          channel.send('page-data', {\n            title: document.title,\n            url: window.location.href,\n            referrer: document.referrer,\n            cookies: document.cookie.length,\n            localStorage: Object.keys(window.localStorage || {}).length,\n            sessionStorage: Object.keys(window.sessionStorage || {}).length\n          });\n          break;\n      }\n    }\n  });\n  \n  // Notify content script that injection is complete\n  channel.send('injection-complete', {\n    timestamp: Date.now(),\n    url: window.location.href\n  });\n  \n})();"],"names":[],"sourceRoot":""}